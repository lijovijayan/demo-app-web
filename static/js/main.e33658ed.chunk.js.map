{"version":3,"sources":["components/navbar.tsx","components/app.header.tsx","components/controls/batch.select.control.tsx","config/environment.ts","utils/string.utils.ts","services/city.service.ts","services/state.service.ts","services/country.service.ts","services/college.service.ts","services/student.service.ts","services/cource.service.ts","services/skill.service.ts","components/controls/city.select.control.tsx","components/controls/college.select.control.tsx","components/controls/country.select.control.tsx","components/controls/cource.select.control.tsx","components/controls/skill.select.control.tsx","components/controls/state.select.control.tsx","hooks/chart.resize.hook.ts","screens/dashboard/charts/skills.bar.tsx","screens/dashboard/charts/college-students-country.line.tsx","utils/common.utils.ts","screens/dashboard/charts/cources.radar.tsx","screens/dashboard/charts/countries.doughnut.tsx","screens/dashboard/charts/states.doughnut.tsx","screens/dashboard/charts/cities.doughnut.tsx","screens/dashboard/overview/index.tsx","constants/form/student.filter.constants.ts","constants/form/college.filter.constants.ts","screens/dashboard/colleges/filters.tsx","screens/dashboard/colleges/table-columns.tsx","screens/dashboard/colleges/index.tsx","screens/dashboard/students/filters.tsx","screens/dashboard/students/table-columns.tsx","screens/dashboard/students/index.tsx","screens/dashboard/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","className","size","AppHeader","title","Item","extra","disabled","options","value","label","BatchSelect","onChange","showSearch","allowClear","placeholder","filterOption","input","option","toLowerCase","startsWith","toLocaleLowerCase","BASE_URL","process","ENV","api","country","list","getById","getWithFilter","state","city","college","student","cource","skill","FormatString","str","_str","val","index","length","replace","subString","start","end","substring","indexOf","lastIndexOf","CityService","Promise","resolve","reject","a","Axios","get","data","filter","post","id","StateService","CountryService","CollegeService","StudentService","CourceService","SkillService","CitySelect","useState","setOptions","loading","setLoader","cityService","getCitiesWithFilter","cities","map","_city","name","useEffect","fetchCities","country_id","state_id","CollegeSelect","collegeService","getColleges","colleges","_college","fetchColleges","CountrySelect","countryService","getCountries","countries","_country","fetchCountries","CourceSelect","courceService","getCources","cources","_cource","fetchCources","SkillSelect","skillService","getSkills","skills","_skill","fetchSkills","StateSelect","stateService","getStatesWithFilter","states","_state","fetchStates","useChartUpdate","chartRef","useRef","formatData","records","labels","datasets","backgroundColor","randomColor","format","forEach","push","students","responsive","maintainAspectRatio","plugins","legend","position","text","display","padding","font","weight","SkillsBarChart","setData","console","log","fetchData","ref","_ref","current","i","colors","color","colorWithOpacity","getColorWithOpacity","borderColor","_","lineTension","collegeIndex","_student","skillIndex","includes","NumberOfStudentsAndCollegesLineChart","setSkills","_skills","scales","x","ticks","callback","values","borderWidth","CourcesRadarChart","_cources","style","width","height","CountriesDaughnutChart","onCountryChange","indicator","setIndicator","cookies","Cookies","showIndicator","hideIndicator","_data","ids","findIndex","_label","onClick","e","item","datasetIndex","countryId","set","path","placement","StatesDaughnutChart","onStateChange","CitiesDaughnutChart","Overview","setColleges","location","setLocation","onLocationChange","_location","STUDENT_FILTER_FORM_CONTROL","COLLEGE_FILTER_FORM_CONTROL","Search","Input","useForm","Form","Filters","setTimeout","document","querySelectorAll","setAttribute","form","SEARCH_KEY","COUNTRY","STATE","CITY","COURCE","formData","setFormData","onValuesChange","hasOwnProperty","undefined","setFieldsValue","autoComplete","autoCorrect","onSearch","searchKey","Column","Table","renderColumns","dataIndex","fixed","render","Colleges","setFilter","page","pageSize","orderBy","totalRecords","pagination","setPagination","getCollegesWithFilter","_pagination","_filter","_formattedFilter","getFormattedFilter","pageNumber","total","showQuickJumper","pageSizeOptions","scroll","y","dataSource","BATCH","COLLEGE","SKILL","Students","setStudents","fetchStudents","studentService","getStudentsWithFilter","formattedFilter","year_of_batch","college_id","TabPane","Tabs","Dashboard","defaultActiveKey","activeKey","tab","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","ArcElement","BarElement","Tooltip","Legend","Title","Filler","RadialLinearScale","App","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e33658ed.chunk.js","sourcesContent":["import '../styles/component.styles/navbar.scss'\nimport {\n    IoRocketOutline,\n    IoTodayOutline,\n    IoSpeedometerOutline,\n    IoMailUnreadOutline,\n    IoExtensionPuzzleOutline,\n    IoCreateOutline,\n    IoHomeOutline,\n    IoBuildOutline,\n    IoPersonOutline\n} from 'react-icons/io5'\n\nexport function NavBar() {\n    return (\n        <div className=\"app-navbar\">\n            <ol>\n                <li className=\"app-icon\">\n                    <IoRocketOutline size={28} />\n                </li>\n                <li>\n                    <IoHomeOutline size={28} />\n                </li>\n                <li className=\"active\">\n                    <IoSpeedometerOutline size={28} />\n                </li>\n                <li>\n                    <IoMailUnreadOutline size={28} />\n                </li>\n                <div className=\"divider\"></div>\n                <li>\n                    <IoCreateOutline size={28} />\n                </li>\n                <li>\n                    <IoTodayOutline size={28} />\n                </li>\n                <div className=\"divider\"></div>\n                <li>\n                    <IoBuildOutline size={28} />\n                </li>\n                <li>\n                    <IoExtensionPuzzleOutline size={28} />\n                </li>\n                <div className=\"divider\"></div>\n                <li>\n                    <IoPersonOutline size={28} />\n                </li>\n            </ol>\n        </div>\n    )\n}\n","import '../styles/component.styles/app.header.scss'\nimport { Breadcrumb, Button, PageHeader } from 'antd'\n\nexport function AppHeader() {\n    return (\n        <div className=\"app-header\">\n            <PageHeader\n                className=\"site-page-header\"\n                title={\n                    <Breadcrumb className=\"app-breadcrumb\">\n                        <Breadcrumb.Item>Oneshot</Breadcrumb.Item>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>Dashboard</Breadcrumb.Item>\n                    </Breadcrumb>\n                }\n                extra={[\n                    <Button disabled key=\"3\">PRINT</Button>,\n                    <Button disabled key=\"2\">EXPORT</Button>\n                ]}\n            ></PageHeader>\n        </div>\n    )\n}\n","import { Select } from 'antd'\n\ninterface IOption {\n    value: any\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n}\n\nconst options: IOption[] = [\n    { value: 2018, label: '2018' },\n    { value: 2019, label: '2019' },\n    { value: 2020, label: '2020' },\n    { value: 2021, label: '2021' },\n    { value: 2022, label: '2022' }\n]\n\nexport function BatchSelect({ onChange, value }: Props) {\n    return (\n        <Select\n            showSearch\n            allowClear\n            placeholder=\"Select batch\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","let BASE_URL = process.env.BASE_URL\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    BASE_URL = 'https://api.lijovijayan.dev'\n} else {\n    BASE_URL = 'https://api.lijovijayan.dev'\n}\n\nexport const ENV = {\n    api: {\n        country: {\n            list: `${BASE_URL}/oneshot/api/v1/countries`,\n            getById: `${BASE_URL}/oneshot/api/v1/countries/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/countries`\n        },\n        state: {\n            list: `${BASE_URL}/oneshot/api/v1/states`,\n            getById: `${BASE_URL}/oneshot/api/v1/states/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/states`\n        },\n        city: {\n            list: `${BASE_URL}/oneshot/api/v1/cities`,\n            getById: `${BASE_URL}/oneshot/api/v1/cities/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/cities`\n        },\n        college: {\n            list: `${BASE_URL}/oneshot/api/v1/colleges`,\n            getById: `${BASE_URL}/oneshot/api/v1/colleges/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/colleges`\n        },\n        student: {\n            list: `${BASE_URL}/oneshot/api/v1/students`,\n            getById: `${BASE_URL}/oneshot/api/v1/students/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/students`\n        },\n        cource: {\n            list: `${BASE_URL}/oneshot/api/v1/cources`,\n            getById: `${BASE_URL}/oneshot/api/v1/cources/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/cources`\n        },\n        skill: {\n            list: `${BASE_URL}/oneshot/api/v1/skills`,\n            getById: `${BASE_URL}/oneshot/api/v1/skills/{0}`,\n            getWithFilter: `${BASE_URL}/oneshot/api/v1/skills`\n        }\n    }\n}\n","export function FormatString(str: string, ...val: any[]): string {\n    let _str = str\n    for (let index = 0; index < val.length; index += 1) {\n        _str = _str?.replace(`{${index}}`, val[index])\n    }\n    return _str\n}\nexport function subString(str: string, start: string, end: string): string {\n    return str.substring(str.indexOf(start) + 1, str.lastIndexOf(end))\n}\n","import { ICity, IFCity } from '../types'\nimport Axios from 'axios'\nimport { ENV } from '../config'\nimport { FormatString } from '../utils'\n\nexport class CityService {\n    getCities(): Promise<ICity[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.city.list)\n                const city: ICity[] = data\n                resolve(city)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCitiesWithFilter(filter: IFCity): Promise<ICity[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.city.list, filter)\n                const city: ICity[] = data\n                resolve(city)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCityById(id: number): Promise<ICity> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(\n                    FormatString(ENV.api.city.list, id)\n                )\n                const city: ICity = data\n                resolve(city)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport { IState, IFState } from '../types'\n\nexport class StateService {\n    getStates(): Promise<IState[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.state.list)\n                const states: IState[] = data\n                resolve(states)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getStatesWithFilter(filter: IFState): Promise<IState[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.state.list, filter)\n                const states: IState[] = data\n                resolve(states)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getStateById(id: number): Promise<IState> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.state.list)\n                const state: IState = data\n                resolve(state)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport { ICountry, IFCountry } from '../types'\nimport { FormatString } from '../utils'\n\nexport class CountryService {\n    getCountries(): Promise<ICountry[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.country.list)\n                const countries: ICountry[] = data\n                resolve(countries)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCountriesWithFilter(filter: IFCountry): Promise<ICountry[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.country.list, filter)\n                const countries: ICountry[] = data\n                resolve(countries)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCountryById(id: number): Promise<ICountry> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(\n                    FormatString(ENV.api.country.list, id)\n                )\n                const country: ICountry = data\n                resolve(country)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport {\n    ICollege,\n    IFCollege,\n    IPaginatedResponse,\n    ICollegeObject\n} from '../types'\nimport { FormatString } from '../utils'\n\nexport class CollegeService {\n    getColleges(): Promise<ICollegeObject[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.college.list)\n                const colleges: ICollegeObject[] = data\n                resolve(colleges)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCollegesWithFilter(\n        filter: IFCollege\n    ): Promise<IPaginatedResponse<ICollegeObject[]>> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.college.list, filter)\n                const colleges: IPaginatedResponse<ICollegeObject[]> = data\n                resolve(colleges)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCollegeById(id: number): Promise<ICollege> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(\n                    FormatString(ENV.api.college.list, id)\n                )\n                const college: ICollege = data\n                resolve(college)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport {\n    IStudent,\n    IFStudent,\n    IPaginatedResponse,\n    IStudentObject\n} from '../types'\n\nexport class StudentService {\n    getStudents(): Promise<IStudentObject[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.student.list)\n                const students: IStudentObject[] = data\n                resolve(students)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getStudentsWithFilter(\n        filter: IFStudent\n    ): Promise<IPaginatedResponse<IStudentObject[]>> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.student.list, filter)\n                const response: IPaginatedResponse<IStudentObject[]> = data\n                resolve(response)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getStudentById(id: number): Promise<IStudent> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.student.list)\n                const student: IStudent = data\n                resolve(student)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport { ICource, IFCource } from '../types'\nimport { FormatString } from '../utils'\n\nexport class CourceService {\n    getCources(): Promise<ICource[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.cource.list)\n                const cources: ICource[] = data\n                resolve(cources)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCourcesWithFilter(filter: IFCource): Promise<ICource[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.cource.list)\n                const cources: ICource[] = data\n                resolve(cources)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getCourceById(id: number): Promise<ICource> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(\n                    FormatString(ENV.api.cource.list, id)\n                )\n                const cource: ICource = data\n                resolve(cource)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import Axios from 'axios'\nimport { ENV } from '../config'\nimport { IFSkill, ISkill } from '../types'\n\nexport class SkillService {\n    getSkills(): Promise<ISkill[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.skill.list)\n                const skills: ISkill[] = data\n                resolve(skills)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getSkillsWithFilter(filter: IFSkill): Promise<ISkill[]> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.post(ENV.api.skill.list, filter)\n                const skills: ISkill[] = data\n                resolve(skills)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    getSkillById(id: number): Promise<ISkill> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await Axios.get(ENV.api.skill.list)\n                const skill: ISkill = data\n                resolve(skill)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { CityService } from '../../services'\nimport { IFCity } from '../../types'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n    filter?: IFCity\n}\n\nexport function CitySelect({ onChange, value, filter = {} }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n\n    useEffect(() => {\n        fetchCities()\n    }, [filter.country_id, filter.state_id])\n\n    async function fetchCities() {\n        setLoader(true)\n        const cityService = new CityService()\n        try {\n            const cities = await cityService.getCitiesWithFilter(filter)\n            setOptions(\n                cities.map((_city) => {\n                    return {\n                        value: _city.id,\n                        label: _city.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select city\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { CollegeService } from '../../services'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n}\n\nexport function CollegeSelect({ onChange, value }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n    useEffect(() => {\n        fetchColleges()\n    }, [])\n    async function fetchColleges() {\n        setLoader(true)\n        const collegeService = new CollegeService()\n        try {\n            const colleges = await collegeService.getColleges()\n            setOptions(\n                colleges.map((_college) => {\n                    return {\n                        value: _college.id,\n                        label: _college.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select college\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { CountryService } from '../../services'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n}\n\nexport function CountrySelect({ onChange, value }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n    useEffect(() => {\n        fetchCountries()\n    }, [])\n    async function fetchCountries() {\n        setLoader(true)\n        const countryService = new CountryService()\n        try {\n            const countries = await countryService.getCountries()\n            setOptions(\n                countries.map((_country) => {\n                    return {\n                        value: _country.id,\n                        label: _country.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select country\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { CourceService } from '../../services'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n}\n\nexport function CourceSelect({ onChange, value }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n    useEffect(() => {\n        fetchCources()\n    }, [])\n    async function fetchCources() {\n        setLoader(true)\n        const courceService = new CourceService()\n        try {\n            const cources = await courceService.getCources()\n            setOptions(\n                cources.map((_cource) => {\n                    return {\n                        value: _cource.id,\n                        label: _cource.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select cource\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { SkillService } from '../../services'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n}\n\nexport function SkillSelect({ onChange, value }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n    useEffect(() => {\n        fetchSkills()\n    }, [])\n    async function fetchSkills() {\n        setLoader(true)\n        const skillService = new SkillService()\n        try {\n            const skills = await skillService.getSkills()\n            setOptions(\n                skills.map((_skill) => {\n                    return {\n                        value: _skill.id,\n                        label: _skill.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select skill\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { StateService } from '../../services'\nimport { IFState } from '../../types'\n\ninterface IOption {\n    value: number\n    label: string\n}\ninterface Props {\n    value?: string\n    onChange?: (value: string) => void\n    filter?: IFState\n}\n\nexport function StateSelect({ onChange, value, filter = {} }: Props) {\n    const [options, setOptions] = useState<IOption[]>([])\n    const [loading, setLoader] = useState<boolean>(false)\n\n    useEffect(() => {\n        fetchStates()\n    }, [filter.country_id])\n\n    async function fetchStates() {\n        setLoader(true)\n        const stateService = new StateService()\n        try {\n            const states = await stateService.getStatesWithFilter(filter)\n            setOptions(\n                states.map((_state) => {\n                    return {\n                        value: _state.id,\n                        label: _state.name\n                    }\n                })\n            )\n        } catch {\n            setOptions([])\n        } finally {\n            setLoader(false)\n        }\n    }\n\n    return (\n        <Select\n            showSearch\n            allowClear\n            loading={loading}\n            placeholder=\"Select state\"\n            onChange={onChange}\n            options={options}\n            value={value}\n            filterOption={(input: string, option: any) =>\n                option?.label\n                    ?.toLowerCase()\n                    ?.startsWith(input.toLocaleLowerCase())\n            }\n        ></Select>\n    )\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useChartUpdate() {\n    const chartRef = useRef<any>()\n    useEffect(() => {\n        // function onSizeChange() {\n        //     console.log('on update')\n        //     chartRef.current && chartRef.current.render()\n        // }\n        // window.addEventListener('resize', onSizeChange)\n        // onSizeChange()\n        // return () => window.removeEventListener('resize', onSizeChange)\n    }, [])\n    return chartRef\n}\n","import { useEffect, useState } from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport { SkillService } from '../../../services'\nimport { ISkill } from '../../../types'\nimport randomColor from 'randomcolor'\nimport { subString } from '../../../utils'\nimport { useChartUpdate } from '../../../hooks'\n\ninterface Props {\n    data?: any\n}\ninterface IBarChartData {\n    labels: string[]\n    datasets: {\n        label: string\n        data: number[]\n        backgroundColor: string\n    }[]\n}\n\nfunction formatData(data: ISkill[]): IBarChartData {\n    const records: IBarChartData = {\n        labels: [],\n        datasets: [\n            {\n                label: 'Skills',\n                data: [],\n                backgroundColor: randomColor({\n                    format: 'rgb'\n                })\n            }\n        ]\n    }\n    data.forEach((_cource) => {\n        records.labels.push(_cource.name)\n        records.datasets[0].data.push(_cource.students.length)\n    })\n    return records\n}\n\nconst options: any = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n        legend: {\n            position: 'right'\n        },\n        title: {\n            text: 'Number of students with specific skills',\n            // color: 'red',\n            display: true,\n            padding: 3,\n            font: {\n                weight: \"normal\"\n            }\n        }\n    }\n}\nexport function SkillsBarChart() {\n    const chartRef = useChartUpdate()\n    const [data, setData] = useState<IBarChartData>({\n        labels: [],\n        datasets: []\n    })\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    async function fetchData() {\n        const skillService = new SkillService()\n        const skills: ISkill[] = await skillService.getSkills()\n        console.log(formatData(skills))\n        setData(formatData(skills))\n    }\n    return (\n        <Bar\n            ref={(_ref) => (chartRef.current = _ref)}\n            data={data}\n            options={options}\n        ></Bar>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { useChartUpdate } from '../../../hooks'\nimport { SkillService } from '../../../services'\nimport { ICollegeObject, ISkill } from '../../../types'\nimport { getColorWithOpacity } from '../../../utils'\ninterface Props {\n    colleges: ICollegeObject[]\n    setLoader: (loading: boolean) => void\n}\ninterface ILineChartData {\n    labels: string[]\n    datasets: {\n        label: string\n        data: number[]\n        id: number\n        borderColor: string\n        backgroundColor: string\n        lineTension: number\n    }[]\n}\n\nfunction formatData(\n    colleges: ICollegeObject[],\n    skills: ISkill[]\n): ILineChartData {\n    const labels = colleges.map((_college) => _college.name)\n    const datasets = skills.map((skill, i) => {\n        const colors = getColorWithOpacity()\n        return {\n            backgroundColor: colors.colorWithOpacity,\n            borderColor: colors.color,\n            data: labels.map((_) => 0),\n            id: skill.id,\n            label: skill.name,\n            lineTension: 0.5\n        }\n    })\n    const records: ILineChartData = {\n        labels: labels,\n        datasets: datasets\n    }\n    colleges.forEach((_college, collegeIndex) => {\n        _college.students.forEach((_student) => {\n            skills.forEach((_skill, skillIndex) => {\n                if (_skill.students.includes(_student)) {\n                    records.datasets[skillIndex].data[collegeIndex] += 1\n                }\n            })\n        })\n    })\n    return records\n}\n\nexport function NumberOfStudentsAndCollegesLineChart({\n    colleges,\n    setLoader\n}: Props) {\n    const chartRef = useChartUpdate()\n    const [skills, setSkills] = useState<ISkill[]>([])\n    const [data, setData] = useState<ILineChartData>({\n        labels: [],\n        datasets: []\n    })\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        if (colleges.length > 0 && skills.length > 0) {\n            setData(formatData(colleges, skills))\n        }\n    }, [colleges, skills])\n\n    async function fetchData() {\n        setLoader(true)\n        const skillService = new SkillService()\n        const _skills: ISkill[] = await skillService.getSkills()\n        setSkills(_skills)\n        setLoader(false)\n    }\n    return (\n        <Line\n            ref={(_ref) => chartRef.current}\n            options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    title: {\n                        text: 'Number of students with specific skills in each colleges',\n                        // color: 'red',\n                        display: true,\n                        padding: 3,\n                        font: {\n                            weight: \"normal\"\n                        }\n                    }\n                },\n                scales: {\n                    x: {\n                        ticks: {\n                            callback: function (value, index, values) {\n                                return index + 1\n                            }\n                        }\n                    }\n                }\n            }}\n            data={data}\n        ></Line>\n    )\n}\n","import randomColor from 'randomcolor'\nimport { subString } from './string.utils'\n\nexport function getColorWithOpacity() {\n    const color = randomColor({\n        format: 'rgb'\n    })\n    const colorWithOpacity = `rgba(${subString(color, '(', ')')}, 0.2)`\n    return {\n        color,\n        colorWithOpacity\n    }\n}\n","import { useEffect, useState } from 'react'\nimport { Radar } from 'react-chartjs-2'\nimport { CourceService } from '../../../services'\nimport { ICource } from '../../../types'\nimport randomColor from 'randomcolor'\nimport { subString } from '../../../utils'\nimport { useChartUpdate } from '../../../hooks'\n\ninterface IRadarChartData {\n    labels: string[]\n    datasets: {\n        label: string\n        data: number[]\n        backgroundColor: string\n        borderColor: string\n        borderWidth: 1\n    }[]\n}\n\nfunction formatData(data: ICource[]): IRadarChartData {\n    const color = randomColor({\n        format: 'rgb'\n    })\n    const colorWithOpacity = `rgba(${subString(color, '(', ')')}, 0.2)`\n    const records: IRadarChartData = {\n        labels: [],\n        datasets: [\n            {\n                label: 'Countries',\n                data: [],\n                backgroundColor: colorWithOpacity,\n                borderColor: color,\n                borderWidth: 1\n            }\n        ]\n    }\n    data.forEach((_cource) => {\n        records.labels.push(_cource.name)\n        records.datasets[0].data.push(_cource.colleges.length)\n    })\n    return records\n}\n\nconst options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n        legend: {\n            display: false\n        },\n        title: {\n            text: 'Number of colleges offering specific cources',\n            // color: 'red',\n            display: true,\n            padding: 3,\n            font: {\n                weight: \"normal\"\n            }\n        }\n    }\n}\nexport function CourcesRadarChart() {\n    const chartRef = useChartUpdate()\n    const [data, setData] = useState<IRadarChartData>({\n        labels: [],\n        datasets: []\n    })\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    async function fetchData() {\n        const courceService = new CourceService()\n        const _cources: ICource[] = await courceService.getCources()\n        setData(formatData(_cources))\n    }\n\n    return (\n        <Radar\n            ref={(_ref) => (chartRef.current = _ref)}\n            data={data}\n            options={options}\n            style={{ width: '100%', height: '100%' }}\n        ></Radar>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport randomColor from 'randomcolor'\nimport { ICollegeObject } from '../../../types'\nimport { subString } from '../../../utils'\nimport { Tooltip } from 'antd'\nimport { AiOutlineExclamationCircle } from 'react-icons/ai'\nimport Cookies from 'universal-cookie'\nimport { useChartUpdate } from '../../../hooks'\n\ninterface Props {\n    country: number\n    onCountryChange: (country: number) => void\n    colleges: ICollegeObject[]\n}\n\ninterface IDoughnutChartData {\n    labels: string[]\n    datasets: {\n        ids: number[]\n        label: string\n        data: number[]\n        backgroundColor: string[]\n        borderColor: string[]\n        borderWidth: 1\n    }[]\n}\n\nfunction formatData(data: ICollegeObject[]): IDoughnutChartData {\n    const records: IDoughnutChartData = {\n        labels: [],\n        datasets: [\n            {\n                label: 'Countries',\n                ids: [],\n                data: [],\n                backgroundColor: [],\n                borderColor: [],\n                borderWidth: 1\n            }\n        ]\n    }\n    data.forEach((_college) => {\n        const color = randomColor({\n            format: 'rgb'\n        })\n        const colorWithOpacity = `rgba(${subString(color, '(', ')')}, 0.2)`\n        const index = records.labels.findIndex(\n            (_label) => _college.country.name === _label\n        )\n        if (index >= 0) {\n            records.datasets[0].data[index] += 1\n        } else {\n            records.labels.push(_college.country.name)\n            records.datasets[0].ids.push(_college.country.id)\n            records.datasets[0].data.push(1)\n            records.datasets[0].backgroundColor.push(colorWithOpacity)\n            records.datasets[0].borderColor.push(color)\n        }\n    })\n    return records\n}\nexport function CountriesDaughnutChart({\n    onCountryChange,\n    colleges,\n    country\n}: Props) {\n    const chartRef = useChartUpdate()\n    const [indicator, setIndicator] = useState<boolean>(false)\n    const [data, setData] = useState<IDoughnutChartData>({\n        labels: [],\n        datasets: []\n    })\n    useEffect(() => {\n        const cookies = new Cookies()\n        const showIndicator = 0 !== +cookies.get('hideIndicator')\n        console.log(showIndicator, {\n            hideIndicator: cookies.get('hideIndicator')\n        })\n        setIndicator(showIndicator)\n    }, [])\n\n    function removeIndicator() {\n        const cookies = new Cookies()\n        cookies.set('hideIndicator', 0, { path: '/' })\n        setIndicator(false)\n    }\n\n    useEffect(() => {\n        const _data = formatData(colleges)\n        setData(_data)\n        if (country <= 0 && _data.datasets[0].data.length > 0) {\n            onCountryChange(_data.datasets[0].ids[0])\n        }\n    }, [colleges])\n\n    const options = {\n        responsive: true,\n        onClick: (e: any, item: any) => {\n            const datasetIndex = item?.[0]?.datasetIndex\n            const index = item?.[0]?.index\n            if (index >= 0 && datasetIndex >= 0) {\n                const countryId: number = data.datasets[datasetIndex].ids[index]\n                countryId !== country && onCountryChange(countryId)\n                indicator && removeIndicator()\n            }\n        },\n        maintainAspectRatio: false,\n        plugins: {\n            title: {\n                text: 'Countries',\n                display: true,\n                padding: 3,\n                font: {\n                    weight: \"normal\"\n                }\n            }\n        }\n    }\n\n    return (\n        <>\n            <Doughnut\n                ref={(_ref) => (chartRef.current = _ref)}\n                data={data}\n                options={options}\n            >\n            </Doughnut>\n\n            {indicator && (\n                <Tooltip\n                placement=\"left\"\n                    title=\"click on each sections to filter states and cities\"\n                    color={'#34dba1'}\n                >\n                    <div className=\"feature-indicator-wrapper blink\">\n                        <AiOutlineExclamationCircle />\n                    </div>\n                </Tooltip>\n            )}\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport randomColor from 'randomcolor'\nimport { ICollegeObject } from '../../../types'\nimport { subString } from '../../../utils'\nimport { useChartUpdate } from '../../../hooks'\n\ninterface Props {\n    country: number\n    state: number\n    colleges: ICollegeObject[]\n    onStateChange: (state: number) => void\n}\n\ninterface IDoughnutChartData {\n    labels: string[]\n    datasets: {\n        label: string\n        data: number[]\n        ids: number[]\n        backgroundColor: string[]\n        borderColor: string[]\n        borderWidth: 1\n    }[]\n}\n\nfunction formatData(\n    data: ICollegeObject[],\n    country: number\n): IDoughnutChartData {\n    const records: IDoughnutChartData = {\n        labels: [],\n        datasets: [\n            {\n                label: 'Countries',\n                data: [],\n                ids: [],\n                backgroundColor: [],\n                borderColor: [],\n                borderWidth: 1\n            }\n        ]\n    }\n    data.forEach((_college) => {\n        if (_college.country.id !== country) return true\n        const color = randomColor({\n            format: 'rgb'\n        })\n        const colorWithOpacity = `rgba(${subString(color, '(', ')')}, 0.2)`\n        const index = records.labels.findIndex(\n            (_label) => _college.state.name === _label\n        )\n        if (index >= 0) {\n            records.datasets[0].data[index] += 1\n        } else {\n            records.labels.push(_college.state.name)\n            records.datasets[0].ids.push(_college.state.id)\n            records.datasets[0].data.push(1)\n            records.datasets[0].backgroundColor.push(colorWithOpacity)\n            records.datasets[0].borderColor.push(color)\n        }\n    })\n    return records\n}\nexport function StatesDaughnutChart({\n    country,\n    onStateChange,\n    colleges,\n    state\n}: Props) {\n    const chartRef = useChartUpdate()\n    const [data, setData] = useState<IDoughnutChartData>({\n        labels: [],\n        datasets: []\n    })\n\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        onClick: (e: any, item: any) => {\n            const datasetIndex = item?.[0]?.datasetIndex\n            const index = item?.[0]?.index\n            if (index >= 0 && datasetIndex >= 0) {\n                const countryId: number = data.datasets[datasetIndex].ids[index]\n                onStateChange(countryId)\n            }\n        },\n        plugins: {\n            title: {\n                text: 'States',\n                // color: 'red',\n                display: true,\n                padding: 3,\n                font: {\n                    weight: \"normal\"\n                }\n            }\n            // legend: {\n            //     display: false\n            // }\n        }\n    }\n\n    useEffect(() => {\n        const _data = formatData(colleges, country)\n        setData(_data)\n        if (state <= 0 && _data.datasets[0].data.length > 0) {\n            onStateChange(_data.datasets[0].ids[0])\n        }\n    }, [colleges, country])\n\n    return (\n        <Doughnut\n            ref={(_ref) => (chartRef.current = _ref)}\n            data={data}\n            options={options}\n        ></Doughnut>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport randomColor from 'randomcolor'\nimport { ICollegeObject } from '../../../types'\nimport { subString } from '../../../utils'\nimport { useChartUpdate } from '../../../hooks'\n\ninterface Props {\n    state: number\n    colleges: ICollegeObject[]\n}\n\ninterface IDoughnutChartData {\n    labels: string[]\n    datasets: {\n        label: string\n        data: number[]\n        ids: number[]\n        backgroundColor: string[]\n        borderColor: string[]\n        borderWidth: 1\n    }[]\n}\n\nfunction formatData(data: ICollegeObject[], state: number): IDoughnutChartData {\n    const records: IDoughnutChartData = {\n        labels: [],\n        datasets: [\n            {\n                label: 'Countries',\n                data: [],\n                ids: [],\n                backgroundColor: [],\n                borderColor: [],\n                borderWidth: 1\n            }\n        ]\n    }\n    data.forEach((_college) => {\n        if (_college.state.id !== state) return true\n        const color = randomColor({\n            format: 'rgb'\n        })\n        const colorWithOpacity = `rgba(${subString(color, '(', ')')}, 0.2)`\n        const index = records.labels.findIndex(\n            (_label) => _college.city.name === _label\n        )\n        if (index >= 0) {\n            records.datasets[0].data[index] += 1\n        } else {\n            records.labels.push(_college.city.name)\n            records.datasets[0].ids.push(_college.city.id)\n            records.datasets[0].data.push(1)\n            records.datasets[0].backgroundColor.push(colorWithOpacity)\n            records.datasets[0].borderColor.push(color)\n        }\n    })\n    return records\n}\n\nconst options = {\n    maintainAspectRatio: false,\n    responsive: true,\n    plugins: {\n        title: {\n            text: 'Cities',\n            // color: 'red',\n            display: true,\n            padding: 3,\n            font: {\n                weight: 'normal'\n            }\n        }\n        // legend: {\n        //     display: false\n        // }\n    }\n}\nexport function CitiesDaughnutChart({ state, colleges }: Props) {\n    const chartRef = useChartUpdate()\n    const [data, setData] = useState<IDoughnutChartData>({\n        labels: [],\n        datasets: []\n    })\n    useEffect(() => {\n        setData(formatData(colleges, state))\n    }, [colleges, state])\n    return (\n        <Doughnut\n            ref={(_ref) => chartRef.current}\n            data={data}\n            options={options}\n        ></Doughnut>\n    )\n}\n","import { SkillsBarChart } from '../charts/skills.bar'\nimport { NumberOfStudentsAndCollegesLineChart } from '../charts/college-students-country.line'\nimport { CourcesRadarChart } from '../charts/cources.radar'\nimport { CountriesDaughnutChart } from '../charts/countries.doughnut'\nimport { useEffect, useState } from 'react'\nimport { StatesDaughnutChart } from '../charts/states.doughnut'\nimport { CitiesDaughnutChart } from '../charts/cities.doughnut'\nimport { CollegeService } from '../../../services'\nimport { ICollegeObject } from '../../../types'\n\nexport interface IDashboardLocation {\n    country: number\n    state: number\n}\n\nexport function Overview() {\n    const [colleges, setColleges] = useState<ICollegeObject[]>([])\n    const [loading, setLoader] = useState<boolean>(true)\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    async function fetchData() {\n        const collegeService = new CollegeService()\n        const colleges: ICollegeObject[] = await collegeService.getColleges()\n        setColleges(colleges)\n    }\n    const [location, setLocation] = useState<IDashboardLocation>({\n        country: 0,\n        state: 0\n    })\n\n    function onLocationChange(_location: Partial<IDashboardLocation>) {\n        setLocation({\n            ...location,\n            ..._location\n        })\n    }\n    const { country, state } = location\n\n    function renderCountries() {\n        return (\n            <div>\n                    <CountriesDaughnutChart\n                        country={country}\n                        colleges={colleges}\n                        onCountryChange={(id) =>\n                            onLocationChange({ country: id, state: 0 })\n                        }\n                    />\n            </div>\n        )\n    }\n    function renderStates() {\n        return (\n            <div>\n                <StatesDaughnutChart\n                    state={state}\n                    country={country}\n                    colleges={colleges}\n                    onStateChange={(id) => onLocationChange({ state: id })}\n                />\n            </div>\n        )\n    }\n    function renderCities() {\n        return (\n            <div>\n                <CitiesDaughnutChart colleges={colleges} state={state} />\n            </div>\n        )\n    }\n    function renderCources() {\n        return (\n            <div>\n                <CourcesRadarChart />\n            </div>\n        )\n    }\n    function renderSkills() {\n        return (\n            <div>\n                <SkillsBarChart />\n            </div>\n        )\n    }\n    function renderColleges() {\n        return (\n            <div>\n                <NumberOfStudentsAndCollegesLineChart\n                    setLoader={setLoader}\n                    colleges={colleges}\n                />\n            </div>\n        )\n    }\n    return (\n        <div\n            className={`overview ${\n                loading ? 'charts-loading' : 'charts-loaded'\n            }`}\n        >\n            {renderCountries()}\n            {renderStates()}\n            {renderCities()}\n            {renderCources()}\n            {renderSkills()}\n            {renderColleges()}\n            <div className=\"loading-layer\">\n                <div className=\"loading-animation\"></div>\n            </div>\n        </div>\n    )\n}\n","export enum STUDENT_FILTER_FORM_CONTROL {\n    SEARCH_KEY = 'SEARCH_KEY',\n    COLLEGE = 'COLLEGE',\n    COURCE = 'COURCE',\n    SKILL = 'SKILL',\n    BATCH = 'BATCH'\n}\n","export enum COLLEGE_FILTER_FORM_CONTROL {\n    SEARCH_KEY = 'SEARCH_KEY',\n    COUNTRY = 'ONESHOT_COUNTRY',\n    STATE = 'ONESHOT_STATE',\n    CITY = 'ONESHOT_CITY',\n    COURCE = 'COURCE'\n}\n","import React, { useEffect, useState } from 'react'\nimport { Input, Form } from 'antd'\nimport {\n    CountrySelect,\n    StateSelect,\n    CitySelect,\n    CourceSelect\n} from '../../../components'\nimport {} from 'antd/lib/form/Form'\nimport { ICollegeFilterForm } from '../../../types'\nimport { COLLEGE_FILTER_FORM_CONTROL } from '../../../constants'\n\nconst { Search } = Input\n\ninterface Props {\n    onChange: (filter: ICollegeFilterForm) => void\n}\n\nconst { useForm, Item } = Form\nfunction Filters({ onChange }: Props) {\n    const disableAutoComplete = () => {\n        setTimeout(() => {\n            document.querySelectorAll('input').forEach((e) => {\n                e.setAttribute('autocomplete', 'oneshot-prevent-autocomplete')\n            })\n        }, 1000)\n    }\n    useEffect(() => {\n        disableAutoComplete()\n    }, [])\n    const [form] = useForm<ICollegeFilterForm>()\n    const [formData, setFormData] = useState<ICollegeFilterForm>({\n        [COLLEGE_FILTER_FORM_CONTROL.SEARCH_KEY]: '',\n        [COLLEGE_FILTER_FORM_CONTROL.COUNTRY]: 0,\n        [COLLEGE_FILTER_FORM_CONTROL.STATE]: 0,\n        [COLLEGE_FILTER_FORM_CONTROL.CITY]: 0,\n        [COLLEGE_FILTER_FORM_CONTROL.COURCE]: 0\n    })\n    function onSearch(searchKey: string) {\n        console.log(searchKey)\n    }\n    function onValuesChange(\n        value: Partial<ICollegeFilterForm>,\n        values: ICollegeFilterForm\n    ) {\n        if (value.hasOwnProperty(COLLEGE_FILTER_FORM_CONTROL.COUNTRY)) {\n            values[COLLEGE_FILTER_FORM_CONTROL.CITY] = undefined\n            values[COLLEGE_FILTER_FORM_CONTROL.STATE] = undefined\n            form.setFieldsValue(values)\n        } else if (value.hasOwnProperty(COLLEGE_FILTER_FORM_CONTROL.STATE)) {\n            values[COLLEGE_FILTER_FORM_CONTROL.CITY] = undefined\n            form.setFieldsValue(values)\n        }\n        onChange(values)\n        setFormData({ ...formData, ...values })\n    }\n    return (\n        <Form\n            form={form}\n            className=\"filter-container\"\n            onValuesChange={onValuesChange}\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n        >\n            <Item name={[COLLEGE_FILTER_FORM_CONTROL.SEARCH_KEY]}>\n                <Search\n                    placeholder=\"student name\"\n                    onSearch={onSearch}\n                    allowClear\n                />\n            </Item>\n            <Item name={[COLLEGE_FILTER_FORM_CONTROL.COUNTRY]}>\n                <CountrySelect />\n            </Item>\n            <Item name={[COLLEGE_FILTER_FORM_CONTROL.STATE]}>\n                <StateSelect\n                    filter={{\n                        country_id:\n                            formData[COLLEGE_FILTER_FORM_CONTROL.COUNTRY] ||\n                            undefined\n                    }}\n                />\n            </Item>\n            <Item name={[COLLEGE_FILTER_FORM_CONTROL.CITY]}>\n                <CitySelect\n                    filter={{\n                        country_id:\n                            formData[COLLEGE_FILTER_FORM_CONTROL.COUNTRY] ||\n                            undefined,\n                        state_id:\n                            formData[COLLEGE_FILTER_FORM_CONTROL.STATE] ||\n                            undefined\n                    }}\n                />\n            </Item>\n            <Item name={[COLLEGE_FILTER_FORM_CONTROL.COURCE]}>\n                <CourceSelect />\n            </Item>\n        </Form>\n    )\n}\n\nexport default Filters\n","import React from 'react'\nimport { Table, Tag } from 'antd'\n\nconst { Column } = Table\n\nexport default renderColumns\nfunction renderColumns() {\n    return (\n        <>\n            <Column\n                title=\"Full Name\"\n                dataIndex=\"name\"\n                key=\"name\"\n                fixed={'left'}\n            />\n            <Column\n                title=\"Year Founded\"\n                dataIndex=\"year_founded\"\n                key=\"year_founded\"\n            />\n            <Column\n                title=\"Country\"\n                dataIndex=\"country\"\n                key=\"country\"\n                render={(country) => <>{country?.name}</>}\n            />\n            <Column\n                title=\"State\"\n                dataIndex=\"state\"\n                key=\"state\"\n                render={(state) => <>{state?.name}</>}\n            />\n            <Column\n                title=\"City\"\n                dataIndex=\"city\"\n                key=\"city\"\n                render={(city) => <>{city?.name}</>}\n            />\n            <Column\n                title=\"cources\"\n                dataIndex=\"cources\"\n                key=\"cources\"\n                render={(cources) => (\n                    <>\n                        {cources.map((cource: any) => (\n                            <Tag color=\"blue\" key={cource.id}>\n                                {cource.name}\n                            </Tag>\n                        ))}\n                    </>\n                )}\n            />\n            <Column\n                title=\"Number of Students\"\n                dataIndex=\"students\"\n                key=\"students\"\n                render={(students) => <>{students.length}</>}\n            />\n        </>\n    )\n}\n","import { Table } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { COLLEGE_FILTER_FORM_CONTROL } from '../../../constants'\nimport { CollegeService } from '../../../services'\nimport {\n    IPaginatedResponse,\n    IPagination,\n    ICollegeObject,\n    IFCollege,\n    ICollegeFilterForm,\n    ICollege\n} from '../../../types'\nimport Filters from './filters'\nimport renderColumns from './table-columns'\n\nexport function Colleges() {\n    const [loading, setLoader] = useState(false)\n    const [filter, setFilter] = useState<Partial<ICollege>>({})\n    const [colleges, setColleges] = useState<ICollegeObject[]>([])\n    const [pagination, setPagination] = useState<IPagination>({\n        page: 1,\n        pageSize: 10,\n        orderBy: [],\n        searchKey: '',\n        totalRecords: 0\n    })\n    useEffect(() => {\n        fetchColleges({ pagination })\n    }, [])\n\n    async function fetchColleges(filter: IFCollege) {\n        filter.pagination.totalRecords = undefined\n        setLoader(true)\n\n        const collegeService = new CollegeService()\n        const {\n            data,\n            pagination: _pagination\n        }: IPaginatedResponse<ICollegeObject[]> =\n            await collegeService.getCollegesWithFilter(filter)\n\n        setPagination({\n            ...pagination,\n            ..._pagination\n        })\n\n        setColleges(data)\n        setLoader(false)\n    }\n\n    function getFormattedFilter(\n        _filter: ICollegeFilterForm\n    ): Partial<ICollege> {\n        return {\n            name: _filter[COLLEGE_FILTER_FORM_CONTROL.SEARCH_KEY],\n            country: _filter[COLLEGE_FILTER_FORM_CONTROL.COUNTRY],\n            state: _filter[COLLEGE_FILTER_FORM_CONTROL.STATE],\n            city: _filter[COLLEGE_FILTER_FORM_CONTROL.CITY],\n            cources: _filter[COLLEGE_FILTER_FORM_CONTROL.COURCE]\n                ? ([_filter[COLLEGE_FILTER_FORM_CONTROL.COURCE]] as any)\n                : undefined\n        }\n    }\n\n    function onFilterChange(_filter: ICollegeFilterForm) {\n        const _formattedFilter = getFormattedFilter(_filter)\n        const searchFilter: IFCollege = {\n            pagination: {\n                ...pagination,\n                page: 1\n            },\n            ..._formattedFilter\n        }\n        fetchColleges(searchFilter)\n        setFilter(_formattedFilter)\n    }\n\n    function onPageChange(pageNumber: number, pageSize: number) {\n        console.log({ pageNumber, pageSize })\n        const _pagination = {\n            ...pagination,\n            page: pageNumber,\n            pageSize: pageSize\n        }\n        fetchColleges({\n            pagination: _pagination,\n            ...filter\n        })\n    }\n    console.log(pagination)\n\n    return (\n        <div className=\"colleges\">\n            <Filters onChange={onFilterChange} />\n            <Table\n                loading={\n                    loading && {\n                        indicator: <div className=\"loading-animation\"></div>\n                    }\n                }\n                pagination={{\n                    onChange: onPageChange,\n                    total: pagination.totalRecords,\n                    pageSize: pagination.pageSize,\n                    current: pagination.page,\n                    showQuickJumper: true,\n                    pageSizeOptions: ['10', '20', '50']\n                }}\n                scroll={{\n                    y: 'calc(100vh - 285px)',\n                    x: 'fit-content'\n                }}\n                dataSource={colleges}\n            >\n                {renderColumns()}\n            </Table>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Input, Form } from 'antd'\nimport {\n    BatchSelect,\n    CollegeSelect,\n    CourceSelect,\n    SkillSelect\n} from '../../../components'\nimport {} from 'antd/lib/form/Form'\nimport { IStudentFilterForm } from '../../../types'\nimport { STUDENT_FILTER_FORM_CONTROL } from '../../../constants'\n\nconst { Search } = Input\n\ninterface Props {\n    onChange: (filter: IStudentFilterForm) => void\n}\n\nconst { useForm, Item } = Form\nfunction Filters({ onChange }: Props) {\n    const [form] = useForm<IStudentFilterForm>()\n    function onSearch(searchKey: string) {\n        console.log(searchKey)\n    }\n    function onValuesChange(\n        _: Partial<IStudentFilterForm>,\n        values: IStudentFilterForm\n    ) {\n        onChange(values)\n    }\n    return (\n        <Form\n            form={form}\n            className=\"filter-container\"\n            onValuesChange={onValuesChange}\n        >\n            <Item name={[STUDENT_FILTER_FORM_CONTROL.SEARCH_KEY]}>\n                <Search placeholder=\"college name\" onSearch={onSearch} allowClear />\n            </Item>\n            <Item name={[STUDENT_FILTER_FORM_CONTROL.BATCH]}>\n                <BatchSelect />\n            </Item>\n            <Item name={[STUDENT_FILTER_FORM_CONTROL.COLLEGE]}>\n                <CollegeSelect />\n            </Item>\n            <Item name={[STUDENT_FILTER_FORM_CONTROL.COURCE]}>\n                <CourceSelect />\n            </Item>\n            <Item name={[STUDENT_FILTER_FORM_CONTROL.SKILL]}>\n                <SkillSelect />\n            </Item>\n        </Form>\n    )\n}\n\nexport default Filters\n","import React from 'react'\nimport { Table, Tag } from 'antd'\n\nconst { Column } = Table\n\nexport default renderColumns\n\nfunction renderColumns() {\n    return (\n        <>\n            <Column\n                title=\"Full Name\"\n                dataIndex=\"name\"\n                key=\"name\"\n                fixed={'left'}\n            />\n            <Column\n                title=\"Year of Batch\"\n                dataIndex=\"year_of_batch\"\n                key=\"year_of_batch\"\n            />\n            <Column\n                title=\"College\"\n                dataIndex=\"college\"\n                key=\"college\"\n                render={(college) => <>{college?.name}</>}\n            />\n            <Column\n                title=\"skills\"\n                dataIndex=\"skills\"\n                key=\"skills\"\n                render={(skills) => (\n                    <>\n                        {skills.map((skill: any) => (\n                            <Tag color=\"blue\" key={skill.id}>\n                                {skill.name}\n                            </Tag>\n                        ))}\n                    </>\n                )}\n            />\n        </>\n    )\n}\n","import { Table } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { STUDENT_FILTER_FORM_CONTROL } from '../../../constants'\nimport { StudentService } from '../../../services'\nimport {\n    IFStudent,\n    IPaginatedResponse,\n    IPagination,\n    IStudentObject,\n    IStudentFilterForm,\n    IStudent\n} from '../../../types'\nimport Filters from './filters'\nimport renderColumns from './table-columns'\n\nexport function Students() {\n    const [loading, setLoader] = useState(false)\n    const [filter, setFilter] = useState<Partial<IStudent>>({})\n    const [students, setStudents] = useState<IStudentObject[]>([])\n    const [pagination, setPagination] = useState<IPagination>({\n        page: 1,\n        pageSize: 10,\n        orderBy: [],\n        searchKey: '',\n        totalRecords: 0\n    })\n    useEffect(() => {\n        fetchStudents({ pagination })\n    }, [])\n\n    function onFilterChange(_filter: IStudentFilterForm) {\n        const formattedFilter = getFormattedFilter(_filter)\n        const searchFilter: IFStudent = {\n            pagination: {\n                ...pagination,\n                page: 1\n            },\n            ...formattedFilter\n        }\n        fetchStudents(searchFilter)\n        setFilter(formattedFilter)\n    }\n\n    function getFormattedFilter(\n        _filter: IStudentFilterForm\n    ): Partial<IStudent> {\n        return {\n            name: _filter[STUDENT_FILTER_FORM_CONTROL.SEARCH_KEY],\n            year_of_batch: _filter[STUDENT_FILTER_FORM_CONTROL.BATCH],\n            college_id: _filter[STUDENT_FILTER_FORM_CONTROL.COLLEGE],\n            skills: _filter[STUDENT_FILTER_FORM_CONTROL.SKILL]\n                ? [_filter[STUDENT_FILTER_FORM_CONTROL.SKILL]]\n                : undefined\n        }\n    }\n\n    async function fetchStudents(filter: IFStudent) {\n        filter.pagination.totalRecords = undefined\n        setLoader(true)\n\n        const studentService = new StudentService()\n\n        const {\n            data,\n            pagination: _pagination\n        }: IPaginatedResponse<IStudentObject[]> =\n            await studentService.getStudentsWithFilter(filter)\n\n        setPagination({\n            ...pagination,\n            ..._pagination\n        })\n\n        setStudents(data)\n        setLoader(false)\n    }\n    function onPageChange(pageNumber: number, pageSize: number) {\n        const _pagination = {\n            ...pagination,\n            page: pageNumber,\n            pageSize: pageSize\n        }\n        fetchStudents({ pagination: _pagination, ...filter })\n    }\n\n    return (\n        <div className=\"students\">\n            <Filters onChange={onFilterChange} />\n            <Table\n                pagination={{\n                    onChange: onPageChange,\n                    total: pagination.totalRecords,\n                    pageSize: pagination.pageSize,\n                    current: pagination.page,\n                    showQuickJumper: true,\n                    pageSizeOptions: ['10', '20', '50']\n                }}\n                loading={\n                    loading && {\n                        indicator: <div className=\"loading-animation\"></div>\n                    }\n                }\n                scroll={{\n                    y: 'calc(100vh - 285px)',\n                    x: 'fit-content'\n                }}\n                dataSource={students}\n            >\n                {renderColumns()}\n            </Table>\n        </div>\n    )\n}\n","import { Tabs } from 'antd'\nimport { IoAnalyticsOutline } from 'react-icons/io5'\nimport { FaUserGraduate } from 'react-icons/fa'\nimport { GiOrganigram } from 'react-icons/gi'\nimport '../../styles/screen.styles/dashboard.scss'\nimport { Overview } from './overview'\nimport { Colleges } from './colleges'\nimport { Students } from './students'\nconst { TabPane } = Tabs\n\nexport function Dashboard() {\n    function onTabChange(activeKey: string) {\n        console.log(activeKey)\n    }\n    return (\n        <div className=\"dashboard\">\n            <Tabs defaultActiveKey=\"1\" onChange={onTabChange}>\n                <TabPane\n                    tab={\n                        <div className=\"tab-title\">\n                            <IoAnalyticsOutline />\n                            Overview\n                        </div>\n                    }\n                    key=\"1\"\n                >\n                    <Overview />\n                </TabPane>\n                <TabPane\n                    tab={\n                        <div className=\"tab-title\">\n                            <GiOrganigram />\n                            Colleges\n                        </div>\n                    }\n                    key=\"2\"\n                >\n                <Colleges />\n                </TabPane>\n                <TabPane\n                    tab={\n                        <div className=\"tab-title\">\n                            <FaUserGraduate />\n                            Students\n                        </div>\n                    }\n                    key=\"3\"\n                >\n                <Students />\n                </TabPane>\n            </Tabs>\n        </div>\n    )\n}\n","import { AppHeader, NavBar } from './components'\nimport { Dashboard } from './screens/dashboard'\nimport './styles/app.scss'\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    ArcElement,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    RadialLinearScale,\n    Filler\n} from 'chart.js'\nimport { useEffect } from 'react'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    ArcElement,\n    BarElement,\n    Tooltip,\n    Legend,\n    Title,\n    Filler,\n    RadialLinearScale\n)\n\nfunction App() {\n    return (\n        <div className=\"app-container\">\n            <div className=\"navbar\">\n                <NavBar />\n            </div>\n            <div className=\"app-content\">\n                <AppHeader />\n                <div className=\"screen-content\">\n                    <Dashboard />\n                </div>\n            </div>\n            <div className=\"not-implemented\">\n                <img\n                    src=\"/assets/images/responsive.png\"\n                    alt=\"under development\"\n                />\n                <span>\n                    Responsive design is under development, try a higher\n                    dimensional resolution!\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}